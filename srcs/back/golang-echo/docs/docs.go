// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth/login": {
            "post": {
                "description": "ユーザー認証を行い、アクセストークンを発行します。",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "認証"
                ],
                "summary": "ログイン",
                "parameters": [
                    {
                        "description": "ログイン情報",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ログイン成功",
                        "schema": {
                            "$ref": "#/definitions/schemas.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "リクエスト不正",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "メール未認証またはパスワード不一致",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "ユーザーが見つかりません",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "サーバーエラー",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "ユーザーをログアウトし、アクセストークンを無効化します。",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "認証"
                ],
                "summary": "ログアウト",
                "responses": {
                    "200": {
                        "description": "ログアウト成功",
                        "schema": {
                            "$ref": "#/definitions/schemas.Response"
                        }
                    },
                    "401": {
                        "description": "認証エラー（無効なトークンまたは期限切れ）",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "ユーザーが見つかりません",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "サーバーエラー",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "description": "新規ユーザーを登録します。ユーザー名、メールアドレス、パスワードが必要です。",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "認証"
                ],
                "summary": "ユーザー登録",
                "parameters": [
                    {
                        "description": "登録情報",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/schemas.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "登録成功",
                        "schema": {
                            "$ref": "#/definitions/schemas.Response"
                        }
                    },
                    "400": {
                        "description": "リクエスト不正",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "ユーザー名またはメールアドレスが既に使用されています",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "サーバーエラー",
                        "schema": {
                            "$ref": "#/definitions/schemas.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "schemas.ErrorResponse": {
            "description": "エラー発生時の共通レスポンス形式",
            "type": "object",
            "properties": {
                "error": {
                    "description": "エラーメッセージ",
                    "type": "string",
                    "example": "internal server error"
                }
            }
        },
        "schemas.LoginRequest": {
            "description": "ログイン時のリクエスト内容",
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "description": "パスワード",
                    "type": "string",
                    "example": "Password123!"
                },
                "username": {
                    "description": "ユーザー名",
                    "type": "string",
                    "example": "ykusano"
                }
            }
        },
        "schemas.LoginResponse": {
            "description": "ログイン成功時のレスポンス",
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "JWTアクセストークン",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIs..."
                },
                "is_preparation": {
                    "description": "初回ログインが済んでいるかどうか",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "schemas.RegisterRequest": {
            "description": "ユーザー登録時のリクエスト内容",
            "type": "object",
            "required": [
                "email",
                "password",
                "repassword",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "メールアドレス",
                    "type": "string",
                    "example": "ykusano@test.com"
                },
                "password": {
                    "description": "パスワード（8~30文字の英大小文字・数字・記号を含む）",
                    "type": "string",
                    "example": "Password123!"
                },
                "repassword": {
                    "description": "パスワード（確認用）",
                    "type": "string",
                    "example": "Password123!"
                },
                "username": {
                    "description": "ユーザー名（3~30文字の英数字とアンダースコア）",
                    "type": "string",
                    "example": "ykusano"
                }
            }
        },
        "schemas.Response": {
            "description": "処理成功時の共通レスポンス形式",
            "type": "object",
            "properties": {
                "message": {
                    "description": "レスポンスメッセージ",
                    "type": "string",
                    "example": "successfully"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "あなたのAPIタイトル",
	Description:      "APIの説明をここに書く",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
